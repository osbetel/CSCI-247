/*
 * Andrew Nguyen
 * W0118 3647
 * Spring 2017, CSCI 247
 * Prof. Julian Rrushi
 * 
 * HW Week 4
 */

/*
 * 2.61
 */

int ch2_61_A(int x) {
    return !!x; //Essentially if x != 0
}
int ch2_61_B(int x) {
    return !!(~x); //Exact inverse of A
}
int ch2_61_C(int x) {
    int y = ((sizeof(x) - 1) << 3);    //Least significant byte of x
    return !!(x & (1 << y));   //If any == 1, returns !!
}
int ch2_61_D(int x) {
    !!(~x & 0xFF);  //not-x & 1111 1111, !! determines if result != 0
}

/*
 * 2.64
 */
int any_odd_one(unsigned x) {
    //1010 ... For all 8 bytes
    return !!(x & 0xAAAAAAAA);
}

/*
 * 2.65
 * Allowed to assume x is size of 32 bits
 * So we can run it logarithmically:
 * 32/2 = 16
 * 16/2 = 8... Etc. Until reaching the last bit
 */
int odd_ones(unsigned x) {
    x ^= x >> 16;   //Compares first half and second half
    x ^= x >> 8;    //Compares first half and second half of the above
    x ^= x >> 4;
    x ^= x >> 2;
    x ^= x >> 1;
    return x & 1;   //final comparison, is last bit 1?
}